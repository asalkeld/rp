// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jim-minter/rp/pkg/database (interfaces: OpenShiftClusters)

// Package mock_database is a generated GoMock package.
package mock_database

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	api "github.com/jim-minter/rp/pkg/api"
	cosmosdb "github.com/jim-minter/rp/pkg/database/cosmosdb"
)

// MockOpenShiftClusters is a mock of OpenShiftClusters interface
type MockOpenShiftClusters struct {
	ctrl     *gomock.Controller
	recorder *MockOpenShiftClustersMockRecorder
}

// MockOpenShiftClustersMockRecorder is the mock recorder for MockOpenShiftClusters
type MockOpenShiftClustersMockRecorder struct {
	mock *MockOpenShiftClusters
}

// NewMockOpenShiftClusters creates a new mock instance
func NewMockOpenShiftClusters(ctrl *gomock.Controller) *MockOpenShiftClusters {
	mock := &MockOpenShiftClusters{ctrl: ctrl}
	mock.recorder = &MockOpenShiftClustersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOpenShiftClusters) EXPECT() *MockOpenShiftClustersMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockOpenShiftClusters) Create(arg0 *api.OpenShiftClusterDocument) (*api.OpenShiftClusterDocument, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*api.OpenShiftClusterDocument)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockOpenShiftClustersMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOpenShiftClusters)(nil).Create), arg0)
}

// Delete mocks base method
func (m *MockOpenShiftClusters) Delete(arg0 *api.OpenShiftClusterDocument) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockOpenShiftClustersMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockOpenShiftClusters)(nil).Delete), arg0)
}

// Dequeue mocks base method
func (m *MockOpenShiftClusters) Dequeue() (*api.OpenShiftClusterDocument, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dequeue")
	ret0, _ := ret[0].(*api.OpenShiftClusterDocument)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dequeue indicates an expected call of Dequeue
func (mr *MockOpenShiftClustersMockRecorder) Dequeue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dequeue", reflect.TypeOf((*MockOpenShiftClusters)(nil).Dequeue))
}

// EndLease mocks base method
func (m *MockOpenShiftClusters) EndLease(arg0 api.Key, arg1, arg2 api.ProvisioningState) (*api.OpenShiftClusterDocument, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EndLease", arg0, arg1, arg2)
	ret0, _ := ret[0].(*api.OpenShiftClusterDocument)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EndLease indicates an expected call of EndLease
func (mr *MockOpenShiftClustersMockRecorder) EndLease(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndLease", reflect.TypeOf((*MockOpenShiftClusters)(nil).EndLease), arg0, arg1, arg2)
}

// Get mocks base method
func (m *MockOpenShiftClusters) Get(arg0 api.Key) (*api.OpenShiftClusterDocument, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*api.OpenShiftClusterDocument)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockOpenShiftClustersMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockOpenShiftClusters)(nil).Get), arg0)
}

// Lease mocks base method
func (m *MockOpenShiftClusters) Lease(arg0 api.Key) (*api.OpenShiftClusterDocument, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lease", arg0)
	ret0, _ := ret[0].(*api.OpenShiftClusterDocument)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lease indicates an expected call of Lease
func (mr *MockOpenShiftClustersMockRecorder) Lease(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lease", reflect.TypeOf((*MockOpenShiftClusters)(nil).Lease), arg0)
}

// ListByPrefix mocks base method
func (m *MockOpenShiftClusters) ListByPrefix(arg0 string, arg1 api.Key) (cosmosdb.OpenShiftClusterDocumentIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByPrefix", arg0, arg1)
	ret0, _ := ret[0].(cosmosdb.OpenShiftClusterDocumentIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByPrefix indicates an expected call of ListByPrefix
func (mr *MockOpenShiftClustersMockRecorder) ListByPrefix(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByPrefix", reflect.TypeOf((*MockOpenShiftClusters)(nil).ListByPrefix), arg0, arg1)
}

// Patch mocks base method
func (m *MockOpenShiftClusters) Patch(arg0 api.Key, arg1 func(*api.OpenShiftClusterDocument) error) (*api.OpenShiftClusterDocument, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Patch", arg0, arg1)
	ret0, _ := ret[0].(*api.OpenShiftClusterDocument)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch
func (mr *MockOpenShiftClustersMockRecorder) Patch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockOpenShiftClusters)(nil).Patch), arg0, arg1)
}

// Update mocks base method
func (m *MockOpenShiftClusters) Update(arg0 *api.OpenShiftClusterDocument) (*api.OpenShiftClusterDocument, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(*api.OpenShiftClusterDocument)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockOpenShiftClustersMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockOpenShiftClusters)(nil).Update), arg0)
}
