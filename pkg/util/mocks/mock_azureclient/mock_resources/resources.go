// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jim-minter/rp/pkg/util/azureclient/resources (interfaces: DeploymentsClient,GroupsClient)

// Package mock_resources is a generated GoMock package.
package mock_resources

import (
	context "context"
	reflect "reflect"

	resources "github.com/Azure/azure-sdk-for-go/services/resources/mgmt/2018-05-01/resources"
	autorest "github.com/Azure/go-autorest/autorest"
	gomock "github.com/golang/mock/gomock"
)

// MockDeploymentsClient is a mock of DeploymentsClient interface
type MockDeploymentsClient struct {
	ctrl     *gomock.Controller
	recorder *MockDeploymentsClientMockRecorder
}

// MockDeploymentsClientMockRecorder is the mock recorder for MockDeploymentsClient
type MockDeploymentsClientMockRecorder struct {
	mock *MockDeploymentsClient
}

// NewMockDeploymentsClient creates a new mock instance
func NewMockDeploymentsClient(ctrl *gomock.Controller) *MockDeploymentsClient {
	mock := &MockDeploymentsClient{ctrl: ctrl}
	mock.recorder = &MockDeploymentsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDeploymentsClient) EXPECT() *MockDeploymentsClientMockRecorder {
	return m.recorder
}

// Client mocks base method
func (m *MockDeploymentsClient) Client() autorest.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client")
	ret0, _ := ret[0].(autorest.Client)
	return ret0
}

// Client indicates an expected call of Client
func (mr *MockDeploymentsClientMockRecorder) Client() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockDeploymentsClient)(nil).Client))
}

// CreateOrUpdate mocks base method
func (m *MockDeploymentsClient) CreateOrUpdate(arg0 context.Context, arg1, arg2 string, arg3 resources.Deployment) (resources.DeploymentsCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(resources.DeploymentsCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockDeploymentsClientMockRecorder) CreateOrUpdate(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockDeploymentsClient)(nil).CreateOrUpdate), arg0, arg1, arg2, arg3)
}

// CreateOrUpdateAndWait mocks base method
func (m *MockDeploymentsClient) CreateOrUpdateAndWait(arg0 context.Context, arg1, arg2 string, arg3 resources.Deployment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateAndWait", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateAndWait indicates an expected call of CreateOrUpdateAndWait
func (mr *MockDeploymentsClientMockRecorder) CreateOrUpdateAndWait(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateAndWait", reflect.TypeOf((*MockDeploymentsClient)(nil).CreateOrUpdateAndWait), arg0, arg1, arg2, arg3)
}

// MockGroupsClient is a mock of GroupsClient interface
type MockGroupsClient struct {
	ctrl     *gomock.Controller
	recorder *MockGroupsClientMockRecorder
}

// MockGroupsClientMockRecorder is the mock recorder for MockGroupsClient
type MockGroupsClientMockRecorder struct {
	mock *MockGroupsClient
}

// NewMockGroupsClient creates a new mock instance
func NewMockGroupsClient(ctrl *gomock.Controller) *MockGroupsClient {
	mock := &MockGroupsClient{ctrl: ctrl}
	mock.recorder = &MockGroupsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGroupsClient) EXPECT() *MockGroupsClientMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockGroupsClient) CreateOrUpdate(arg0 context.Context, arg1 string, arg2 resources.Group) (resources.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", arg0, arg1, arg2)
	ret0, _ := ret[0].(resources.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockGroupsClientMockRecorder) CreateOrUpdate(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockGroupsClient)(nil).CreateOrUpdate), arg0, arg1, arg2)
}

// Delete mocks base method
func (m *MockGroupsClient) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockGroupsClientMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGroupsClient)(nil).Delete), arg0, arg1)
}

// Get mocks base method
func (m *MockGroupsClient) Get(arg0 context.Context, arg1 string) (resources.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(resources.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockGroupsClientMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGroupsClient)(nil).Get), arg0, arg1)
}
