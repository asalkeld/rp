// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jim-minter/rp/pkg/install (interfaces: Interface)

// Package mock_install is a generated GoMock package.
package mock_install

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	installconfig "github.com/openshift/installer/pkg/asset/installconfig"

	api "github.com/jim-minter/rp/pkg/api"
)

// MockInterface is a mock of Interface interface
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// Install mocks base method
func (m *MockInterface) Install(arg0 context.Context, arg1 *api.OpenShiftClusterDocument, arg2 *installconfig.InstallConfig, arg3 *installconfig.PlatformCreds) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Install", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Install indicates an expected call of Install
func (mr *MockInterfaceMockRecorder) Install(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Install", reflect.TypeOf((*MockInterface)(nil).Install), arg0, arg1, arg2, arg3)
}
